<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DPC&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/bfa2adcbfd5883f9905426b1399816ee</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dpcfury.github.io/"/>
  <updated>2020-05-24T11:50:57.750Z</updated>
  <id>https://dpcfury.github.io/</id>
  
  <author>
    <name>杜鹏程</name>
    <email>dpcspark@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode[4] Median of Two Sorted Arrays</title>
    <link href="https://dpcfury.github.io/median-of-two-sorted-arrays.html/"/>
    <id>https://dpcfury.github.io/median-of-two-sorted-arrays.html/</id>
    <published>2020-05-24T11:44:40.000Z</published>
    <updated>2020-05-24T11:50:57.750Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">Leetcode 4. Median of Two Sorted Arrays</a><br>题目：给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。</p></blockquote><p>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><a id="more"></a> <p>你可以假设 nums1 和 nums2 不会同时为空。</p><p><strong>示例</strong> 1:</p><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>则中位数是 2.0</p><p><strong>示例</strong>  2:</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>则中位数是 (2 + 3)/2 = 2.5</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p>引用官网的这个思路分析，这题属于需要考虑细致的那种题：<a href="https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/2481/Share-my-O(log(min(mn)))-solution-with-explanation" target="_blank" rel="noopener">https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/2481/Share-my-O(log(min(mn)))-solution-with-explanation</a></p></blockquote><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = A.length;</span><br><span class="line">        <span class="keyword">int</span> n = B.length;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123; <span class="comment">// to ensure m&lt;=n</span></span><br><span class="line">            <span class="keyword">int</span>[] temp = A;</span><br><span class="line">            A = B;</span><br><span class="line">            B = temp;</span><br><span class="line">            <span class="keyword">int</span> tmp = m;</span><br><span class="line">            m = n;</span><br><span class="line">            n = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> iMin = <span class="number">0</span>, iMax = m, halfLen = (m + n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (iMin &lt;= iMax) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = (iMin + iMax) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> j = halfLen - i;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; iMax &amp;&amp; B[j - <span class="number">1</span>] &gt; A[i]) &#123;</span><br><span class="line">                iMin = i + <span class="number">1</span>; <span class="comment">// i is too small</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; iMin &amp;&amp; A[i - <span class="number">1</span>] &gt; B[j]) &#123;</span><br><span class="line">                iMax = i - <span class="number">1</span>; <span class="comment">// i is too big</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// i is perfect</span></span><br><span class="line">                <span class="keyword">int</span> maxLeft = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    maxLeft = B[j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    maxLeft = A[i - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxLeft = Math.max(A[i - <span class="number">1</span>], B[j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((m + n) % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> maxLeft;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * max(A[i−1],B[j−1]),  when m + nm+n is odd</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                 \frac&#123;\max(\text&#123;A&#125;[i-1], \text&#123;B&#125;[j-1]) + \min(\text&#123;A&#125;[i], \text&#123;B&#125;[j])&#125;&#123;2&#125;, \</span></span><br><span class="line"><span class="comment">                 ​2</span></span><br><span class="line"><span class="comment">                 ​</span></span><br><span class="line"><span class="comment">                 ​max(A[i−1],B[j−1])+min(A[i],B[j])</span></span><br><span class="line"><span class="comment">                 ​​ ,  when m + nm+n is even</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> minRight = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">                    minRight = B[j];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">                    minRight = A[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    minRight = Math.min(B[j], A[i]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> (maxLeft + minRight) / <span class="number">2.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 4. Median of Two Sorted Arrays&lt;/a&gt;&lt;br&gt;题目：给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="hard" scheme="https://dpcfury.github.io/tags/hard/"/>
    
      <category term="binary search" scheme="https://dpcfury.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>Leetocde[76] Minimum Window Substring</title>
    <link href="https://dpcfury.github.io/minimum-window-substring.html/"/>
    <id>https://dpcfury.github.io/minimum-window-substring.html/</id>
    <published>2020-05-23T05:26:23.000Z</published>
    <updated>2020-05-23T06:18:59.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/minimum-window-substring/" target="_blank" rel="noopener">76. Minimum Window Substring</a><br>给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字符的最小子串。</p></blockquote><p><strong>示例</strong>：</p><p>输入: S = “ADOBECODEBANC”, T = “ABC”<br>输出: “BANC”</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>统计t中需要出现的字符及出现数量</li><li>保持一个滑动窗口，当窗口中字符不满足num个符合的字符，就继续右移</li><li>如果num变为0，缩小左侧边界，直到所需字符（num）不为0</li><li>不断更新最短子串</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, len = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> num = t.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(t.charAt(i))) &#123;</span><br><span class="line">                map.put(t.charAt(i), map.get(t.charAt(i)) + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                map.put(t.charAt(i), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(chs[right])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.get(chs[right]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    num--;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                map.put(chs[right], map.get(chs[right]) - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                len = (right - left + <span class="number">1</span>) &lt; len ? (right - (start = left) + <span class="number">1</span>) : len;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(chs[left]) &amp;&amp; map.get(chs[left]) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    map.put(chs[left], map.get(chs[left]) + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (map.get(chs[left]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        num++;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len == Integer.MAX_VALUE ? <span class="string">""</span> : s.substring(start, start + len);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-window-substring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;76. Minimum Window Substring&lt;/a&gt;&lt;br&gt;给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字符的最小子串。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;输入: S = “ADOBECODEBANC”, T = “ABC”&lt;br&gt;输出: “BANC”&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="hard" scheme="https://dpcfury.github.io/tags/hard/"/>
    
      <category term="string" scheme="https://dpcfury.github.io/tags/string/"/>
    
      <category term="hashtable" scheme="https://dpcfury.github.io/tags/hashtable/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[5] Longest Palindromic Substring</title>
    <link href="https://dpcfury.github.io/longest-palindromic-substring.html/"/>
    <id>https://dpcfury.github.io/longest-palindromic-substring.html/</id>
    <published>2020-05-22T13:30:20.000Z</published>
    <updated>2020-05-22T15:42:28.121Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">Leetcode 5. Longest Palindromic Substring</a><br>题目：给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。<br>示例 1：<br>输入: “babad”<br>输出: “bab”<br>注意: “aba” 也是一个有效答案。<br>示例 2：</p></blockquote><p>输入: “cbbd”<br>输出: “bb”</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>令dp[i][j]表示s的[i,j]个字符构成的子串是否为回文字符串，那么：</p><ul><li>dp[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; dp[i+1][j-1]<br>这样，可以从长度为0的子串开始计算，s的哪些[i,j]子串为回文，并且如果j+1 -i &gt; 当前记录的最长子串，则更新最长子串出现的起始位置 start = i </li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">int</span> length = s.length();</span><br><span class="line">       <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">boolean</span>[][] isPalindrome = <span class="keyword">new</span> <span class="keyword">boolean</span>[length][length];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + i &lt; length; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (i == <span class="number">0</span> || i == <span class="number">1</span>) &#123;</span><br><span class="line">                   isPalindrome[j][j + i] = s.charAt(j) == s.charAt(j + i);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (s.charAt(j) == s.charAt(j + i)) isPalindrome[j][j + i] = isPalindrome[j + <span class="number">1</span>][j + i - <span class="number">1</span>];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (isPalindrome[j][j + i] &amp;&amp; i + <span class="number">1</span> &gt; maxLen) &#123;</span><br><span class="line">                   maxLen = Math.max(maxLen, i + <span class="number">1</span>);</span><br><span class="line">                   start = j;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> s.substring(start, start + maxLen);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 5. Longest Palindromic Substring&lt;/a&gt;&lt;br&gt;题目：给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。&lt;br&gt;示例 1：&lt;br&gt;输入: “babad”&lt;br&gt;输出: “bab”&lt;br&gt;注意: “aba” 也是一个有效答案。&lt;br&gt;示例 2：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入: “cbbd”&lt;br&gt;输出: “bb”&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="medium" scheme="https://dpcfury.github.io/tags/medium/"/>
    
      <category term="dynamic programming" scheme="https://dpcfury.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[1371] Find the Longest Substring Containing Vowels in Even Counts</title>
    <link href="https://dpcfury.github.io/find-the-longest-substring-containing-vowels-in-even-counts.html/"/>
    <id>https://dpcfury.github.io/find-the-longest-substring-containing-vowels-in-even-counts.html/</id>
    <published>2020-05-20T13:28:38.000Z</published>
    <updated>2020-05-20T13:36:45.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/" target="_blank" rel="noopener">Leetcode 1371. Find the Longest Substring Containing Vowels in Even Counts</a><br>题目：给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 ‘a’，’e’，’i’，’o’，’u’ ，在子字符串中都恰好出现了偶数次。</p></blockquote><p>样例<br>输入：s = “eleetminicoworoep”<br>输出：13<br>解释：最长子字符串是 “leetminicowor” ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>状态压缩 O(n)</li><li>奇数加减奇数都是偶数</li><li>偶数加减偶数还是偶数</li></ul><p>根据题目意思，我们只需要知道a,e,i,o,u这几个元音字母出现了奇数次还是偶数次，而不需要知道具体出现了多少次。所以我们可以用1表示每个字母出现了奇数次，0表示每个字母出现了偶数次。如果用二进制编码来表示对应的状态就是00000-11111(uoiea)，例如10010表示u出现了奇数次，o出现了偶数次，i出现了偶数次..。总共就有32种状态。我们根据异或运算的特点——不带进位的加法，来更新状态。通过维护一个数组，来存储第一次出现某个状态的位置。线性扫描时，对于当前的这个状态，用 i 减去第一次出现这个状态的位置，就能得到一个以 i 结尾的极大子区间。</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTheLongestSubstring</span><span class="params">(String s)</span> </span>&#123;<span class="comment">// 前缀和+状态压缩</span></span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span>[] pos = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span> &lt;&lt; <span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> status = <span class="number">0</span>;</span><br><span class="line">        Arrays.fill(pos, -<span class="number">1</span>);</span><br><span class="line">        pos[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    status ^= <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                    status ^= (<span class="number">1</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'i'</span>:</span><br><span class="line">                    status ^= (<span class="number">1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'o'</span>:</span><br><span class="line">                    status ^= (<span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line">                    status ^= (<span class="number">1</span> &lt;&lt; <span class="number">4</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pos[status] &gt;= <span class="number">0</span>) max = Math.max(max, i + <span class="number">1</span> - pos[status]);</span><br><span class="line">            <span class="keyword">else</span> pos[status] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 1371. Find the Longest Substring Containing Vowels in Even Counts&lt;/a&gt;&lt;br&gt;题目：给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 ‘a’，’e’，’i’，’o’，’u’ ，在子字符串中都恰好出现了偶数次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;样例&lt;br&gt;输入：s = “eleetminicoworoep”&lt;br&gt;输出：13&lt;br&gt;解释：最长子字符串是 “leetminicowor” ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="medium" scheme="https://dpcfury.github.io/tags/medium/"/>
    
      <category term="string" scheme="https://dpcfury.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[680] Valid Palindrome II</title>
    <link href="https://dpcfury.github.io/valid-palindrome-II.html/"/>
    <id>https://dpcfury.github.io/valid-palindrome-II.html/</id>
    <published>2020-05-19T14:25:47.000Z</published>
    <updated>2020-05-19T14:32:16.438Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/valid-palindrome-ii/" target="_blank" rel="noopener">Leetcode 680. Valid Palindrome II</a><br>题目：给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。</p></blockquote><p><strong>示例</strong> 1:</p><p>输入: “aba”<br>输出: True<br>示例 2:</p><p>输入: “abca”<br>输出: True<br>解释: 你可以删除c字符。</p><p><strong>注意</strong>:<br>字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。<br><a id="more"></a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>从前往后，从后往前比较元素，如果相同继续遍历，否则检查剔除前面的元素到后面元素是否为回文，或者剔除后面的元素到前面元素之间的子串是否为回文。</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chs[low] == chs[high]) &#123;</span><br><span class="line">                low++;</span><br><span class="line">                high--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> validPalindrome(chs, low + <span class="number">1</span>, high) || validPalindrome(chs, low, high - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validPalindrome</span><span class="params">(<span class="keyword">char</span>[] chs, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chs[low] != chs[high]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            low++;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-palindrome-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 680. Valid Palindrome II&lt;/a&gt;&lt;br&gt;题目：给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt; 1:&lt;/p&gt;
&lt;p&gt;输入: “aba”&lt;br&gt;输出: True&lt;br&gt;示例 2:&lt;/p&gt;
&lt;p&gt;输入: “abca”&lt;br&gt;输出: True&lt;br&gt;解释: 你可以删除c字符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;br&gt;字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="string" scheme="https://dpcfury.github.io/tags/string/"/>
    
      <category term="palindrome string" scheme="https://dpcfury.github.io/tags/palindrome-string/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[152] Maximum Product Subarray</title>
    <link href="https://dpcfury.github.io/maximum-product-subarray.html/"/>
    <id>https://dpcfury.github.io/maximum-product-subarray.html/</id>
    <published>2020-05-18T15:05:07.000Z</published>
    <updated>2020-05-18T15:16:40.103Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">Leetcode 152. Maximum Product Subarray</a><br>题目：给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。<br><strong>示例</strong> 1:</p></blockquote><p>输入: [2,3,-2,4]<br>输出: 6<br>解释: 子数组 [2,3] 有最大乘积 6。<br>示例 2:</p><p>输入: [-2,0,-1]<br>输出: 0<br>解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>对于数组中任意元素nums[i],包含它的子数组最大值，要么是：</p><ul><li>如果nums[i]&gt;0, 那么最大值可能是nums[i]* （包含前一个数的最大正值）</li><li>如果nums[i]&lt;0, 那么最大值可能是nums[i]* (包含前一个数的最小负值)</li><li>nums[0]==0, 最大值就是0</li></ul><p>利用两个数组positive[i]、negative[i]分别表述以nums[i]结尾最大正乘积和最小负乘积<br>则：</p><ul><li>case1: nums[i]==0:<ul><li>positive[i] = 0;</li><li>negative[i] = 0;</li></ul></li><li>case2: nums[i] &gt; 0:<ul><li>positive[i] = Math.max(positive[i - 1] * nums[i], nums[i]);</li><li>negative = negative[i - 1] * nums[i];</li></ul></li><li>case3: nums[i] &lt;0:<ul><li>positive[i] = negative[i - 1] * nums[i];</li><li>negative[i] = Math.min(positive[i - 1] * nums[i], nums[i]);</li></ul></li></ul><p>全局最大乘积则是不停与positive[i]比较更新获得</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span>[] positive = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span>[] negative = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        positive[<span class="number">0</span>] = Math.max(nums[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">        negative[<span class="number">0</span>] = Math.min(nums[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                positive[i] = <span class="number">0</span>;</span><br><span class="line">                negative[i] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                positive[i] = Math.max(positive[i - <span class="number">1</span>] * nums[i], nums[i]);<span class="comment">//防止之前只能到0</span></span><br><span class="line">                negative[i] = negative[i - <span class="number">1</span>] * nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                positive[i] = negative[i - <span class="number">1</span>] * nums[i];</span><br><span class="line">                negative[i] = Math.min(positive[i - <span class="number">1</span>] * nums[i], nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            max = Math.max(max, positive[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-product-subarray/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 152. Maximum Product Subarray&lt;/a&gt;&lt;br&gt;题目：给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。&lt;br&gt;&lt;strong&gt;示例&lt;/strong&gt; 1:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入: [2,3,-2,4]&lt;br&gt;输出: 6&lt;br&gt;解释: 子数组 [2,3] 有最大乘积 6。&lt;br&gt;示例 2:&lt;/p&gt;
&lt;p&gt;输入: [-2,0,-1]&lt;br&gt;输出: 0&lt;br&gt;解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="dynamic programming" scheme="https://dpcfury.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[210] Course Schedule II</title>
    <link href="https://dpcfury.github.io/course-schedule-II.html/"/>
    <id>https://dpcfury.github.io/course-schedule-II.html/</id>
    <published>2020-05-17T14:33:57.000Z</published>
    <updated>2020-05-17T14:44:26.481Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/course-schedule-ii/" target="_blank" rel="noopener">Leetcode 210. Course Schedule II</a><br>题目：现在你总共有 n 门课需要选，记为 0 到 n-1。<br>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]<br>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。<br>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。<br><strong>示例</strong> 1:</p></blockquote><p>输入: 2, [[1,0]]<br>输出: [0,1]<br>解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这类选课问题和工程上的关键节点问题都属于拓扑排序（Topological Sorting）问题，每次选取入度为零的节点，并删除其出去的边，最终生成一个图的序列，如果存在循环，则无法获取这样的序列。具体解法：</p><ul><li>dfs，每次遍历的最后一个没有出边的节点，就是在路径中课程必须先选的节点</li><li>bfs，每次挑选入度（inDegree）为零的节点，作为最后学的课程，同样压入栈</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] fanIn = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; adjacentList = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] edge : prerequisites) &#123;</span><br><span class="line">            fanIn[edge[<span class="number">1</span>]]++;</span><br><span class="line">            <span class="keyword">if</span> (!adjacentList.containsKey(edge[<span class="number">0</span>])) &#123;</span><br><span class="line">                adjacentList.put(edge[<span class="number">0</span>], <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            adjacentList.get(edge[<span class="number">0</span>]).add(edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fanIn[i] == <span class="number">0</span>) queue.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> vertex = queue.poll();</span><br><span class="line">            res.add(vertex);</span><br><span class="line">            <span class="keyword">if</span> (adjacentList.get(vertex) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> vertexTo : adjacentList.get(vertex)) &#123;</span><br><span class="line">                    fanIn[vertexTo]--;</span><br><span class="line">                    <span class="keyword">if</span> (fanIn[vertexTo] == <span class="number">0</span>) queue.offer(vertexTo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res.size() != numCourses) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">        Collections.reverse(res);</span><br><span class="line">        <span class="keyword">int</span>[] finalRes = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            finalRes[i] = res.get(i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> finalRes;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/course-schedule-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 210. Course Schedule II&lt;/a&gt;&lt;br&gt;题目：现在你总共有 n 门课需要选，记为 0 到 n-1。&lt;br&gt;在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]&lt;br&gt;给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。&lt;br&gt;可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。&lt;br&gt;&lt;strong&gt;示例&lt;/strong&gt; 1:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入: 2, [[1,0]]&lt;br&gt;输出: [0,1]&lt;br&gt;解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="dfs" scheme="https://dpcfury.github.io/tags/dfs/"/>
    
      <category term="bfs" scheme="https://dpcfury.github.io/tags/bfs/"/>
    
      <category term="topological sort" scheme="https://dpcfury.github.io/tags/topological-sort/"/>
    
      <category term="graph" scheme="https://dpcfury.github.io/tags/graph/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[25] Reverse Nodes in k-Group</title>
    <link href="https://dpcfury.github.io/reverse-nodes-in-k-Group.html/"/>
    <id>https://dpcfury.github.io/reverse-nodes-in-k-Group.html/</id>
    <published>2020-05-16T06:21:55.000Z</published>
    <updated>2020-05-16T06:25:39.036Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">Leetcode 25. Reverse Nodes in k-Group</a><br>题目：将链表中的节点按K个分组进行内部翻转，请你返回翻转后的链表。k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>题目其实就是细碎，需要厘清很多细节，每次在K个节点进行翻转的过程中需要记录上一次连接点位置，方便在翻转后链接。</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode first = head;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        newHead.next = head;</span><br><span class="line">        ListNode pre = newHead;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span>)</span><br><span class="line">                num++;</span><br><span class="line">            <span class="keyword">if</span> (num == k &amp;&amp; p!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                ListNode last = p.next;</span><br><span class="line">                ListNode q = p.next;</span><br><span class="line">                ListNode nextPre = first;</span><br><span class="line">                <span class="keyword">while</span> (first != p) &#123;</span><br><span class="line">                    ListNode node = first;</span><br><span class="line">                    first = first.next;</span><br><span class="line">                    node.next = q;</span><br><span class="line">                    p.next = node;</span><br><span class="line">                    q = node;</span><br><span class="line">                &#125;</span><br><span class="line">                pre.next = p;</span><br><span class="line">                first = last;</span><br><span class="line">                p = first;</span><br><span class="line">                pre = nextPre;</span><br><span class="line">                num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-nodes-in-k-group/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 25. Reverse Nodes in k-Group&lt;/a&gt;&lt;br&gt;题目：将链表中的节点按K个分组进行内部翻转，请你返回翻转后的链表。k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="linkedlist" scheme="https://dpcfury.github.io/tags/linkedlist/"/>
    
      <category term="hard" scheme="https://dpcfury.github.io/tags/hard/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[136] Single Number</title>
    <link href="https://dpcfury.github.io/single-number.html/"/>
    <id>https://dpcfury.github.io/single-number.html/</id>
    <published>2020-05-14T15:04:27.000Z</published>
    <updated>2020-05-14T15:07:02.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener">Leetcode 136. Single Number</a><br>题目：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。（不借助辅助的空间）</p></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>利用亦或运算，将真个数组中的元素亦或</li><li>因为其他元素都出现两次，A^A= 0，所以最终结果肯定是唯一的那个数</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> res = nums[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">           res ^= nums[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 136. Single Number&lt;/a&gt;&lt;br&gt;题目：给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。（不借助辅助的空间）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="https://dpcfury.github.io/tags/easy/"/>
    
      <category term="bit" scheme="https://dpcfury.github.io/tags/bit/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[102] Binary Tree Level Order Traversal</title>
    <link href="https://dpcfury.github.io/binary-tree-level-order-traversal.html/"/>
    <id>https://dpcfury.github.io/binary-tree-level-order-traversal.html/</id>
    <published>2020-05-13T15:33:14.000Z</published>
    <updated>2020-05-13T15:37:45.865Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">Leetcode 102. Binary Tree Level Order Traversal</a><br>题目：二叉树的层次遍历（也即树的BFS）</p></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>借助于队列，保存每一层的遍历结果</li><li>利用先序遍历，借助辅助的height高度变量</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = queue.size();</span><br><span class="line">            List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len &amp;&amp; !queue.isEmpty(); i++) &#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    temp.add(node.val);</span><br><span class="line">                    <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.offer(node.left);</span><br><span class="line">                    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            res.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        preOrderTraversal(root, result, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrderTraversal</span><span class="params">(TreeNode root, List&lt;List&lt;Integer&gt;&gt; result, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.size() &lt;= height)</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        result.get(height).add(root.val);</span><br><span class="line">        preOrderTraversal(root.left, result, height + <span class="number">1</span>);</span><br><span class="line">        preOrderTraversal(root.right, result, height + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-level-order-traversal/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 102. Binary Tree Level Order Traversal&lt;/a&gt;&lt;br&gt;题目：二叉树的层次遍历（也即树的BFS）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="tree" scheme="https://dpcfury.github.io/tags/tree/"/>
    
      <category term="bfs" scheme="https://dpcfury.github.io/tags/bfs/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[155] Min Stack</title>
    <link href="https://dpcfury.github.io/min-stack.html/"/>
    <id>https://dpcfury.github.io/min-stack.html/</id>
    <published>2020-05-13T15:27:13.000Z</published>
    <updated>2020-05-13T15:31:21.149Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/min-stack/" target="_blank" rel="noopener">Leetcode 155. Min Stack</a><br>题目：实现一个栈，但是要求能以常数时间获取当前栈内的最小元素。</p></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>根据栈的规则，每一次元素进栈后，原有元素必须在当前元素之后出战</li><li>每次进栈的时候，额外保存一个栈，记录对应入栈过程时，压入当前对应的最小元素</li><li>出栈过程中同时弹出一个元素</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack;</span><br><span class="line">        Stack&lt;Integer&gt; minStack;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * initialize your data structure here.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            minStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            minStack.push(Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            stack.push(x);</span><br><span class="line">            minStack.push(x &lt; minStack.peek() ? x : minStack.peek());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">            minStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> stack.peek();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> minStack.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/min-stack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 155. Min Stack&lt;/a&gt;&lt;br&gt;题目：实现一个栈，但是要求能以常数时间获取当前栈内的最小元素。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="easy" scheme="https://dpcfury.github.io/tags/easy/"/>
    
      <category term="stack" scheme="https://dpcfury.github.io/tags/stack/"/>
    
      <category term="design" scheme="https://dpcfury.github.io/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[50] Pow(x, n)</title>
    <link href="https://dpcfury.github.io/pow-x-n.html/"/>
    <id>https://dpcfury.github.io/pow-x-n.html/</id>
    <published>2020-05-13T15:18:32.000Z</published>
    <updated>2020-05-13T15:22:46.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/powx-n/" target="_blank" rel="noopener">Leetcode 50. Pow(x, n)</a><br>题目：实现 pow(x, n) ，即计算 x 的 n 次幂函数。</p></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>利用二分，将n次幂尽量变为 n/2 * n/2</li><li>注意边界的奇数次幂需要多✖️一次</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> y = pow(x, N / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> N % <span class="number">2</span> == <span class="number">0</span> ? y * y : y * y * x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = n;</span><br><span class="line">        <span class="keyword">return</span> N &gt;= <span class="number">0</span> ? pow(x, N) : <span class="number">1.0</span> / pow(x, -N);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/powx-n/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 50. Pow(x, n)&lt;/a&gt;&lt;br&gt;题目：实现 pow(x, n) ，即计算 x 的 n 次幂函数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="medium" scheme="https://dpcfury.github.io/tags/medium/"/>
    
      <category term="math" scheme="https://dpcfury.github.io/tags/math/"/>
    
      <category term="binary search" scheme="https://dpcfury.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>LeetcodLowest Common Ancestor of a Binary Tree</title>
    <link href="https://dpcfury.github.io/lowest-common-ancestor-of-a-binary-tree.html/"/>
    <id>https://dpcfury.github.io/lowest-common-ancestor-of-a-binary-tree.html/</id>
    <published>2020-05-13T15:05:35.000Z</published>
    <updated>2020-05-13T15:15:26.989Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">Leetcode 236. Lowest Common Ancestor of a Binary Tree</a><br>题目：给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。<br>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”<br>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>对于当前节点而言，如果在dfs过程中，本身就是p或者q本身，直接返回当前节点为包含p或q的最底节点<br>否则：</p><ul><li>要么p、q分别再左右侧能找到，当前节点也肯定是最底公共父节点</li><li>要么就是左子树或右子树中最底的公共父节点作为最终解</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="keyword">null</span> || root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">       TreeNode left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">       TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">       <span class="keyword">if</span> (left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">       <span class="keyword">return</span> left != <span class="keyword">null</span> ? left : right;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 236. Lowest Common Ancestor of a Binary Tree&lt;/a&gt;&lt;br&gt;题目：给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;br&gt;百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”&lt;br&gt;例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="binary tree" scheme="https://dpcfury.github.io/tags/binary-tree/"/>
    
      <category term="medium" scheme="https://dpcfury.github.io/tags/medium/"/>
    
      <category term="dfs" scheme="https://dpcfury.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[69] Sqrt(x)</title>
    <link href="https://dpcfury.github.io/sqrt(x).html/"/>
    <id>https://dpcfury.github.io/sqrt(x).html/</id>
    <published>2020-05-10T12:46:13.000Z</published>
    <updated>2020-05-10T12:55:32.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/sqrtx/" target="_blank" rel="noopener">Leetcode 69. Sqrt(x)</a><br>题目：实现 int sqrt(int x) 函数。<br>计算并返回 x 的平方根，其中 x 是非负整数。<br>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p></blockquote><p><strong>示例 1:</strong></p><p>输入: 4<br>输出: 2<br><a id="more"></a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用二分查找，比较mid元素与 x / mid 结果的大小，调整搜索的左右边界</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (x == <span class="number">0</span> || x == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">       <span class="keyword">int</span> low = <span class="number">1</span>, high = x;</span><br><span class="line">       <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">           <span class="keyword">int</span> mid = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">int</span> sqrt = x / mid;</span><br><span class="line">           <span class="keyword">if</span> (sqrt == mid) &#123;</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sqrt &gt; mid) &#123;</span><br><span class="line">               low = mid + <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               high = mid - <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> high;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/sqrtx/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 69. Sqrt(x)&lt;/a&gt;&lt;br&gt;题目：实现 int sqrt(int x) 函数。&lt;br&gt;计算并返回 x 的平方根，其中 x 是非负整数。&lt;br&gt;由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入: 4&lt;br&gt;输出: 2&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="https://dpcfury.github.io/tags/easy/"/>
    
      <category term="Math" scheme="https://dpcfury.github.io/tags/Math/"/>
    
      <category term="binary search" scheme="https://dpcfury.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[221] Maximal Square</title>
    <link href="https://dpcfury.github.io/maximal%20square.html/"/>
    <id>https://dpcfury.github.io/maximal square.html/</id>
    <published>2020-05-10T12:23:50.000Z</published>
    <updated>2020-05-10T12:30:28.853Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/maximal-square/" target="_blank" rel="noopener">Leetcode 221. Maximal Square</a><br>题目：在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p></blockquote><p>示例:</p><p>输入: </p><p>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0</p><p>输出: 4</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>最大的正方形需要最大的正方向边长实现，令 dp(i, j) 表示以 (i, j)(i,j) 为右下角，且只包含 1 的正方形的边长最大值。如果我们能计算出所有 dp(i, j) 的值，那么其中的最大值即为矩阵中只包含 11的正方形的边长最大值，其平方即为最大正方形的面积。</p><p>则：</p><ul><li><p>如果该位置的值是 0，则 dp(i, j) = 0，因为当前位置不可能在由 11 组成的正方形中；</p></li><li><p>如果该位置的值是 1，则 dp(i, j) 的值由其上方、左方和左上方的三个相邻位置的 dp值决定。具体而言，当前位置的元素值等于三个相邻位置的元素中的最小值加 1，状态转移方程如下：<br>dp(i, j)=min(dp(i−1, j), dp(i−1, j−1), dp(i, j−1))+1</p></li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> col = matrix.length &gt; <span class="number">0</span> ? matrix[<span class="number">0</span>].length : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp[][] = <span class="keyword">new</span> <span class="keyword">int</span>[row][col];</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; i++)</span><br><span class="line">            <span class="keyword">if</span> (matrix[<span class="number">0</span>][i] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">                maxLen = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                maxLen = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i][j] &gt; maxLen) maxLen = dp[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen * maxLen;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximal-square/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 221. Maximal Square&lt;/a&gt;&lt;br&gt;题目：在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: &lt;/p&gt;
&lt;p&gt;1 0 1 0 0&lt;br&gt;1 0 1 1 1&lt;br&gt;1 1 1 1 1&lt;br&gt;1 0 0 1 0&lt;/p&gt;
&lt;p&gt;输出: 4&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="dynamic programming" scheme="https://dpcfury.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[572] Subtree of Another Tree</title>
    <link href="https://dpcfury.github.io/subtree-of-another-tree.html/"/>
    <id>https://dpcfury.github.io/subtree-of-another-tree.html/</id>
    <published>2020-05-07T15:03:35.000Z</published>
    <updated>2020-05-07T15:10:39.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/subtree-of-another-tree/" target="_blank" rel="noopener">Leetcode 572. Subtree of Another Tree</a><br>题目：给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</p></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用递归的特性</p><ul><li>判断s和t是否是相同的树</li><li>判断t是否是s.left的子树</li><li>判断t是否是s.right的子树</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (s == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">if</span> (isSame(s, t))</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">return</span> isSubtree(s.left, t) || isSubtree(s.right, t);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSame</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> s.val == t.val &amp;&amp; isSame(s.left, t.left) &amp;&amp; isSame(s.right, t.right);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/subtree-of-another-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 572. Subtree of Another Tree&lt;/a&gt;&lt;br&gt;题目：给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="https://dpcfury.github.io/tags/easy/"/>
    
      <category term="binary tree" scheme="https://dpcfury.github.io/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[983] Minimum Cost For Tickets</title>
    <link href="https://dpcfury.github.io/minimum-cost-for-tickets.html/"/>
    <id>https://dpcfury.github.io/minimum-cost-for-tickets.html/</id>
    <published>2020-05-07T14:30:15.000Z</published>
    <updated>2020-05-07T14:59:43.090Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/minimum-cost-for-tickets/" target="_blank" rel="noopener">Leetcode 983. Minimum Cost For Tickets</a><br>题目：在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。<br>火车票有三种不同的销售方式：</p><ul><li>一张为期一天的通行证售价为 costs[0] 美元；</li><li>一张为期七天的通行证售价为 costs[1] 美元；</li><li>一张为期三十天的通行证售价为 costs[2] 美元。<br>通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。</li></ul></blockquote><p>返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>今天不需要出门，不用买票</li><li>今天如果要出门，往后买几天比较划算？</li></ul><p>从后往前动规</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><p>引用一个memo的递归写法，其实可以直接从后往前dp写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] costs;</span><br><span class="line">    Integer[] memo;</span><br><span class="line">    Set&lt;Integer&gt; daySet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mincostTickets</span><span class="params">(<span class="keyword">int</span>[] days, <span class="keyword">int</span>[] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.costs = costs;</span><br><span class="line">        memo = <span class="keyword">new</span> Integer[<span class="number">366</span>];</span><br><span class="line">        daySet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> day : days) daySet.add(day);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">365</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (memo[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (daySet.contains(i)) &#123;</span><br><span class="line">            memo[i] = Math.min(Math.min(dp(i + <span class="number">1</span>) + costs[<span class="number">0</span>], dp(i + <span class="number">7</span>) + costs[<span class="number">1</span>]), dp(i + <span class="number">30</span>) + costs[<span class="number">2</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            memo[i] = dp(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[i];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-for-tickets/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 983. Minimum Cost For Tickets&lt;/a&gt;&lt;br&gt;题目：在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。&lt;br&gt;火车票有三种不同的销售方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一张为期一天的通行证售价为 costs[0] 美元；&lt;/li&gt;
&lt;li&gt;一张为期七天的通行证售价为 costs[1] 美元；&lt;/li&gt;
&lt;li&gt;一张为期三十天的通行证售价为 costs[2] 美元。&lt;br&gt;通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="medium" scheme="https://dpcfury.github.io/tags/medium/"/>
    
      <category term="dynamic programming" scheme="https://dpcfury.github.io/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[98] Validate Binary Search Tree</title>
    <link href="https://dpcfury.github.io/validate-binary-search-tree.html/"/>
    <id>https://dpcfury.github.io/validate-binary-search-tree.html/</id>
    <published>2020-05-05T02:01:09.000Z</published>
    <updated>2020-05-05T12:38:38.886Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">Leetcode 98. Validate Binary Search Tree</a><br>题目：给定一个二叉树，判断其是否是一个有效的二叉搜索树。<br>假设一个二叉搜索树具有如下特征：</p><ul><li>节点的左子树只包含小于当前节点的数。</li><li>节点的右子树只包含大于当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。</li></ul></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>二叉搜索树的中序遍历结果一定是升序</li><li>如果遍历过程出现非升序，则一定不合法</li><li>利用全局变量记录上一次遍历的节点，比较判定是否出现非法情况</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inOrderTravesal(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inOrderTravesal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">true</span>;</span><br><span class="line">        result &amp;= inOrderTravesal(root.left);</span><br><span class="line">        result &amp;= (pre == <span class="keyword">null</span> || root.val &gt; pre.val);</span><br><span class="line">        pre = root;</span><br><span class="line">        result &amp;= inOrderTravesal(root.right);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/validate-binary-search-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 98. Validate Binary Search Tree&lt;/a&gt;&lt;br&gt;题目：给定一个二叉树，判断其是否是一个有效的二叉搜索树。&lt;br&gt;假设一个二叉搜索树具有如下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点的左子树只包含小于当前节点的数。&lt;/li&gt;
&lt;li&gt;节点的右子树只包含大于当前节点的数。&lt;/li&gt;
&lt;li&gt;所有左子树和右子树自身必须也是二叉搜索树。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="medium" scheme="https://dpcfury.github.io/tags/medium/"/>
    
      <category term="binary search tree" scheme="https://dpcfury.github.io/tags/binary-search-tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[45] Jump Game II</title>
    <link href="https://dpcfury.github.io/jump-gameII.html/"/>
    <id>https://dpcfury.github.io/jump-gameII.html/</id>
    <published>2020-05-04T09:15:14.000Z</published>
    <updated>2020-05-04T09:27:10.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/jump-game-ii/" target="_blank" rel="noopener">Leetcode 45. Jump Game II</a><br>题目：<br>给定一个非负整数数组，你最初位于数组的第一个位置。<br>数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>你的目标是使用最少的跳跃次数到达数组的最后一个位置。<br>示例:</p></blockquote><p>输入: [2,3,1,1,4]<br>输出: 2<br>解释: 跳到最后一个位置的最小跳跃数是 2。<br>     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。<br><a id="more"></a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>利用动态规划，算法时间复杂度为O(n^2)</li><li>利用贪心算法，更新遍历每步能走到的最远距离</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><p>approach1: 动态规划<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123; <span class="comment">//dp 超时</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j + nums[j] &gt;= i) &#123;</span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>approach2：贪心<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123; <span class="comment">// greedy</span></span><br><span class="line">       <span class="keyword">int</span> n = nums.length;</span><br><span class="line">       <span class="keyword">int</span> step = n == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (max &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> curMax = max;</span><br><span class="line">           <span class="keyword">while</span> (start &lt;= curMax) &#123;</span><br><span class="line">               <span class="keyword">if</span> (start + nums[start] &gt; max) max = start + nums[start];</span><br><span class="line">               start++;</span><br><span class="line">           &#125;</span><br><span class="line">           start = curMax + <span class="number">1</span>;</span><br><span class="line">           step++;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> step;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/jump-game-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 45. Jump Game II&lt;/a&gt;&lt;br&gt;题目：&lt;br&gt;给定一个非负整数数组，你最初位于数组的第一个位置。&lt;br&gt;数组中的每个元素代表你在该位置可以跳跃的最大长度。&lt;br&gt;你的目标是使用最少的跳跃次数到达数组的最后一个位置。&lt;br&gt;示例:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入: [2,3,1,1,4]&lt;br&gt;输出: 2&lt;br&gt;解释: 跳到最后一个位置的最小跳跃数是 2。&lt;br&gt;     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://dpcfury.github.io/tags/leetcode/"/>
    
      <category term="hard" scheme="https://dpcfury.github.io/tags/hard/"/>
    
      <category term="greedy" scheme="https://dpcfury.github.io/tags/greedy/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode[53] Maximum Subarray</title>
    <link href="https://dpcfury.github.io/maximum-subarray.html/"/>
    <id>https://dpcfury.github.io/maximum-subarray.html/</id>
    <published>2020-05-03T13:02:19.000Z</published>
    <updated>2020-05-04T13:55:16.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">Leetcode 53. Maximum Subarray</a><br>题目：给定一个整数数组 <strong> nums </strong> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>遍历数组，追踪当前能获取的数组和，如果之前的sum已经小于等于0，那么最大的子数组不应该从之前开头，此时更新子数组的开头为当前元素</li><li>持续更新子数组最大的sum记录</li></ul><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><p>approach1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> curSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (curSum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                curSum = nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curSum += nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max, curSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>类似滚动数组的实现方法：<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/</a><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    max := nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] + nums[i<span class="number">-1</span>] &gt; nums[i] &#123;</span><br><span class="line">            nums[i] += nums[i<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; max &#123;</span><br><span class="line">            max = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>approach2：<br>线段数的解法 TODO，了解线段树的作用</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-subarray/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode 53. Maximum Subarray&lt;/a&gt;&lt;br&gt;题目：给定一个整数数组 &lt;strong&gt; nums &lt;/strong&gt; ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://dpcfury.github.io/categories/leetcode/"/>
    
    
      <category term="easy" scheme="https://dpcfury.github.io/tags/easy/"/>
    
      <category term="array" scheme="https://dpcfury.github.io/tags/array/"/>
    
      <category term="leetcoe" scheme="https://dpcfury.github.io/tags/leetcoe/"/>
    
  </entry>
  
</feed>
